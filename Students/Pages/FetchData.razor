@page "/fetchdata"

<PageTitle>Studenci</PageTitle>

@using Students.Data
@inject StudentService StudentService

<h1>Studenci</h1>

<p><u>Lista w tabeli</u></p>
<p style="color: crimson;font-size:30px">Kliknij na <u><b>nagłówek</b></u> kolumny aby posortować rosnąco lub malejąco.</p>

@if (studentsCoreList == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th><a @onclick="SortByFirstName">First Name</a></th>
                <th><a @onclick="SortByLastName">Last Name</a></th>
                <!--<th>Email</th>-->
                <th><a @onclick="SortByBirthDate">Birth Date</a></th>
                <th><a @onclick="SortByStudies">Studies</a></th>
                <th>Details</th>
                <th>Delete</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var student in sortedStudents)
            {
                <tr>
                    <td>@student.Id</td>
                    <td>@student.FirstName</td>
                    <td>@student.LastName</td>
                    <!--<td>atstudent.Email</td>-->
                    <td>@student.BirthDate.ToShortDateString()</td>
                    <td>@student.Studies</td>
                    <td>
                        <a href="students/@student.Id">Details</a>
                    </td>
                    <td>
                        <button class="btn btn-danger" @onclick="(() => DeleteConfirmation(student.Id))">Delete</button>
                    </td>

                </tr>
            }
        </tbody>
    </table>

    <div class="modal" style="display:@(_showDelModal ? "block" : "none")">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirmation</h5>
                    <button type="button" class="close" @onclick="CancelDelete">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    Czy napewno chcesz usunąć studenta z id @_idDelStudent?
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CancelDelete">Cancel</button>
                    <button type="button" class="btn btn-danger" @onclick="DeleteStudent">Delete</button>
                </div>
            </div>
        </div>
    </div>

}

@code {
    private Student[] studentsCoreList;
    private Student[] sortedStudents;
    private string sortExpression;
    private bool sortAscending = true;
    private int _idDelStudent;
    private bool _showDelModal;

    protected override async Task OnInitializedAsync()
    {
        studentsCoreList = await StudentService.GetStudents();
        sortedStudents = studentsCoreList.OrderBy(x => x.LastName).ToArray();
    }

    private void SortStudents(Func<Student, string> selector)
    {
        sortedStudents = sortAscending ? studentsCoreList.OrderBy(selector).ToArray() : studentsCoreList.OrderByDescending(selector).ToArray();
    }

    private void SortByLastName()
    {
        if (sortExpression == "LastName")
        {
            sortAscending = !sortAscending;
        }
        else
        {
            sortAscending = true;
            sortExpression = "LastName";
        }

        SortStudents(x => x.LastName);
    }

    private void SortByFirstName()
    {
        if (sortExpression == "FirstName")
        {
            sortAscending = !sortAscending;
        }
        else
        {
            sortAscending = true;
            sortExpression = "FirstName";
        }

        SortStudents(x => x.FirstName);
    }

    private void SortByBirthDate()
    {
        if (sortExpression == "BirthDate")
        {
            sortAscending = !sortAscending;
        }
        else
        {
            sortAscending = true;
            sortExpression = "BirthDate";
        }
        SortStudents(x => x.BirthDate.ToShortDateString());
    }

    private void SortByStudies()
    {
        if (sortExpression == "Studies")
        {
            sortAscending = !sortAscending;
        }
        else
        {
            sortAscending = true;
            sortExpression = "Studies";
        }
        SortStudents(x => x.Studies);
    }

    private void DeleteConfirmation(int id)
    {
        _idDelStudent = id;
        _showDelModal = true;
    }

    private async void DeleteStudent()
    {
        await StudentService.DeleteStudentAsync(_idDelStudent);
        studentsCoreList = await StudentService.GetStudents();
        SortByLastName();
        _showDelModal = false;
    }

    private void CancelDelete()
    {
        _showDelModal = false;
    }

}
